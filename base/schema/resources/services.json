{
  "WorkloadInstance": {
    "type": "object",
    "additionalProperties": false,
    "properties": {
      "enabled": {
        "$ref": "../lib/utils.json#/enabled"
      },
      "annotations": {
        "$ref": "../lib/k8s.json#/Annotations"
      },
      "labels": {
        "$ref": "../lib/k8s.json#/Labels"
      },
      "nameOverride": {
        "$ref": "../lib/utils.json#/nameOverride"
      },
      "type": {
        "type": "string",
        "enum": ["ClusterIP", "LoadBalancer", "NodePort", "ExternalName", "ExternalIP"]
      },
      "clusterIP": {
        "type": "string"
      },
      "loadBalancerIP": {
        "type": "string"
      },
      "loadBalancerSourceRanges": {
        "type": "array",
        "items": {"type": "string"}
      },
      "externalTrafficPolicy": {
        "type": "string",
        "enum": ["Cluster", "Local"],
        "default": "Cluster",
        "description": "ExternalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses. If set to \"Local\", the proxy will configure the service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an External IP or LoadBalancer IP from within the cluster will always get \"Cluster\" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node."
      },
      "allocateLoadBalancerNodePorts": {
        "type": "boolean"
      },
      "sessionAffinity": {
        "type": "string",
        "enum": ["None", "ClientIP"]
      },
      "sessionAffinityConfig": {
        "type": "object"
      },
      "externalIPs": {
        "type": "array",
        "items": {"type": "string"}
      },
      "publishNotReadyAddresses": {
        "type": "boolean"
      },
      "ipFamilyPolicy": {
        "type": "string",
        "enum": ["SingleStack", "PreferDualStack", "RequireDualStack"],
        "default": "SingleStack",
        "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName."
      },
      "ipFamilies": {
        "type": "array",
        "uniqueItems": true,
        "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are \"IPv4\" and \"IPv6\". This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services. This field will be wiped when updating a Service to type ExternalName. This field may hold a maximum of two entries (dual-stack families, in either order). These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
        "items": {
          "type": "string",
          "enum": ["IPv4", "IPv6"]
        }
      },
      "ports": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/servicePort"
        }
      },
      "primary": {
        "title": "Make this the primary service for this controller (used in probes, notes, etc...)",
        "description": "If there is more than 1 service targeting the controller, make sure that only 1 service is marked as primary.",
        "type": "boolean",
        "default": false
      },
      "extraSelectorLabels": {
        "title": "Adding additional match labels",
        "$ref": "../lib/k8s.json#/Labels"
      }
    }
  },
  "ResourceInstance": {
    "allOf": [
      {
        "properties": {
          "controller": {
            "type": "string"
          }
        }
      },
      {
        "$ref": "#/WorkloadInstance"
      }
    ]
  },

  "servicePort": {
    "type": "object",
    "description": "Configure the Service port information. Additional ports can be added by adding a dictionary key similar to the 'http' service.",
    "additionalProperties": false,
    "properties": {
      "enabled": {
        "type": "boolean",
        "default": true
      },
      "primary": {
        "type": "boolean",
        "default": false
      },
      "port": {
        "type": ["string", "integer"]
      },
      "protocol": {
        "type": "string",
        "enum": ["HTTP", "HTTPS", "TCP", "UDP"]
      },
      "targetPort": {
        "type": ["string", "integer"]
      },
      "nodePort": {
        "type": ["string", "integer"]
      },
      "appProtocol": {
        "type": "string"
      }
    },
    "required": ["port"]
  }
}
